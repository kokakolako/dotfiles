#!/usr/bin/env bash

hc() { "${herbstclient_command[@]:-herbstclient}" "$@" ;}

monitor=${1:-0}
geometry=( $(herbstclient monitor_rect "$monitor") )
if [ -z "$geometry" ] ;then
    echo "Invalid monitor $monitor"
    exit 1
fi
# geometry has the format W H X Y
x=${geometry[0]}
y=${geometry[1]}
panel_width=${geometry[2]}
panel_height=20
font="DeJaVu Sans Mono-8"

####
# Try to find textwidth binary.
if [[ -d /opt/xftwidth/ ]]; then
    textwidth="/opt/xftwidth/xftwidth"
else
    git clone https://github.com/vixus0/xftwidth /opt/xftwidth
    cd /opt/xftwidth/
    make
    [[ -z $? ]]\
        && textwidth="/opt/xftwidth/"
fi

if awk -Wv 2>/dev/null | head -1 | grep -q '^mawk'; then
    # mawk needs "-W interactive" to line-buffer stdout correctly
    # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=593504
    uniq_linebuffered() {
        awk -W interactive '$0 != l { print ; l=$0 ; fflush(); }' "$@"
}
else
    # other awk versions (e.g. gawk) issue a warning with "-W interactive", so
    # we don't want to use it there.
    uniq_linebuffered() {
        awk '$0 != l { print ; l=$0 ; fflush(); }' "$@"
}
fi

function draw_tags () {
for i in "${tags[@]}" ; do
    case ${i:0:1} in
        '#')
            printf "^fg(#f92672)"
            ;;
        '+')
            printf "^fg(#000000)"
            ;;
        ':')
            printf "^fg(#f8f8f2)"
            ;;
        '!')
            printf "^fg(#000000)"
            ;;
        *)
            printf "^fg(#a59f85)"
            ;;
    esac
    # clickable tags
    echo -n "^ca(1,\"${herbstclient_command[@]:-herbstclient}\" "
    echo -n "focus_monitor \"$monitor\" && "
    echo -n "\"${herbstclient_command[@]:-herbstclient}\" "
    echo -n "use \"${i:1}\") ● ^ca()"
done
}

function show_volume () {
tail -f ~/.opt/volume-fifo
}

hc pad $monitor $panel_height

{

    ### Event generator ###
    # based on different input data (mpc, date, hlwm hooks, ...) this generates events, formed like this:
    #   <eventname>\t<data> [...]
    # e.g.
    #   date    ^fg(#efefef)18:33^fg(#909090), 2013-10-^fg(#efefef)29

    #mpc idleloop player &

    while true ; do
        # "date" output is checked once a second, but an event is only
        # generated if the output changed compared to the previous run.
        date +$'date\t%Y/%m/%d - %H:%M'
        sleep 1 || break
    done > >(uniq_linebuffered) &
    childpid=$!
    hc --idle
    kill $childpid

} 2> /dev/null | {

IFS=$'\t' read -ra tags <<< "$(hc tag_status $monitor)"
visible=true
date=""
windowtitle=""

while true ; do

    ### Output ###
    # This part prints dzen data based on the _previous_ data handling run,
    # and then waits for the next event to happen.

    temp="^fg(#f8f8f2)$( i8kctl temp )°"
    temp_icon="^fg(#f92672)^i($HOME/.config/herbstluftwm/icons/xbm/temp.xbm)"

    volume_icon="^fg(#f92672)^i($HOME/.config/herbstluftwm/icons/xbm/spkr_01.xbm)"

    cpu="^fg(#f8f8f2)$( ps -eo pcpu | awk 'BEGIN {sum=0.0f} {sum+=$1} END {print sum}' )"
    cpu_icon="^fg(#f92672)^i($HOME/.config/herbstluftwm/icons/xbm/cpu.xbm)"

    batt="^fg(#f8f8f2)$( $HOME/.bin/battery_status )"
    batt_icon="^fg(#f92672)^i($HOME/.config/herbstluftwm/icons/xbm/bat_full_01.xbm)"

    wifi="^fg(#f8f8f2)$( iwconfig wlp8s0 | grep ESSID | cut -c 33- | tr -d '"' | sed "s/[[:space:]]//g" )"
    wifi_icon="^fg(#f92672)^i($HOME/.config/herbstluftwm/icons/xbm/wifi_01.xbm)"

    date_icon="^fg(#f92672)^i($HOME/.config/herbstluftwm/icons/xbm/clock.xbm)^fg(#f8f8f2)"

    right="$batt_icon $batt  $temp_icon $temp  $cpu_icon $cpu  "
    right_text_only=$(echo -n "$left" | sed 's.\^[^(]*([^)]*)..g')

    left="  $date_icon $date"
    left_text_only=$(echo -n "$right" | sed 's:\^[^(]*([^)]*)::g')

    width=$(( $( $textwidth "$font" "$left_text_only"  "$right_text_only" ) + 22 ))
    printf "$left^pa( $(( ( $panel_width ) / 2 - 40 )) )$( draw_tags )^pa( $(( $panel_width - $width )) )${right}"
    echo

    ### Data handling ###
    # This part handles the events generated in the event loop, and sets
    # internal variables based on them. The event and its arguments are
    # read into the array cmd, then action is taken depending on the event
    # name.
    # "Special" events (quit_panel/togglehidepanel/reload) are also handled
    # here.

    # wait for next event
    IFS=$'\t' read -ra cmd || break

    # find out event origin
    case "${cmd[0]}" in
        tag* )
            #echo "resetting tags" >&2
            IFS=$'\t' read -ra tags <<< "$(hc tag_status $monitor)"
            ;;
        date )
            #echo "resetting date" >&2
            date="${cmd[@]:1}"
            ;;
        quit_panel )
            exit
            ;;
        togglehidepanel )
            currentmonidx=$(hc list_monitors | sed -n '/\[FOCUS\]$/s/:.*//p')
            if [ "${cmd[1]}" -ne "$monitor" ] ; then
                continue
            fi
            if [ "${cmd[1]}" = "current" ] && [ "$currentmonidx" -ne "$monitor" ] ; then
                continue
            fi
            echo "^togglehide()"
            if $visible ; then
                visible=false
                hc pad $monitor 0
            else
                visible=true
                hc pad $monitor $panel_height
            fi
            ;;
        reload )
            exit
            ;;
        focus_changed | window_title_changed )
            windowtitle="${cmd[@]:2}"
            ;;
    esac

done

} 2> /dev/null | dzen2 \
    -w $panel_width -h $panel_height -x $x -y $y \
    -fn "$font" \
    -bg "#272822" -fg '#f92672' -p \
    -ta l \
    -e 'button3=;button4=exec:herbstclient use_index -1' ;button5=exec:herbstclient use_index +1
